#include "gtest/gtest.h"

#include <EggBeater/Crypto.h>
//#include <deps/cryptopp/sha3.h>

using namespace EggBeater;

class NoOpFixture : public ::testing::Test
{
public:
  NoOpFixture()
  {
    // No-op
  }
  
  virtual ~NoOpFixture()
  {
    // No-op
  }
  
  virtual void SetUp()
  {
    // No-op
  }
  
  virtual void TearDown()
  {
    // No-op
  }
};

TEST_F(NoOpFixture, AES_256_CFB_1)
{
  ByteArray iv      ({0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
                      0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F});
  ByteArray key     ({0x60, 0x3d, 0xeb, 0x10, 0x15, 0xca, 0x71, 0xbe,
                      0x2b, 0x73, 0xae, 0xf0, 0x85, 0x7d, 0x77, 0x81,
                      0x1f, 0x35, 0x2c, 0x07, 0x3b, 0x61, 0x08, 0xd7,
                      0x2d, 0x98, 0x10, 0xa3, 0x09, 0x14, 0xdf, 0xf4});
  ByteArray plain   ({0x6b, 0xc1, 0xbe, 0xe2, 0x2e, 0x40, 0x9f, 0x96,
                      0xe9, 0x3d, 0x7e, 0x11, 0x73, 0x93, 0x17, 0x2a});
  ByteArray expected({0xDC, 0x7E, 0x84, 0xBF, 0xDA, 0x79, 0x16, 0x4B,
                      0x7E, 0xCD, 0x84, 0x86, 0x98, 0x5D, 0x38, 0x60});
  ByteArray actual;
  
  EXPECT_NO_THROW(actual = tau(key, plain, CipherMode::CFB, iv));
  
  EXPECT_EQ(expected, actual);
}

TEST_F(NoOpFixture, AES_256_CFB_2)
{
  ByteArray iv      ({0xDC, 0x7E, 0x84, 0xBF, 0xDA, 0x79, 0x16, 0x4B,
                      0x7E, 0xCD, 0x84, 0x86, 0x98, 0x5D, 0x38, 0x60});
  ByteArray key     ({0x60, 0x3d, 0xeb, 0x10, 0x15, 0xca, 0x71, 0xbe,
                      0x2b, 0x73, 0xae, 0xf0, 0x85, 0x7d, 0x77, 0x81,
                      0x1f, 0x35, 0x2c, 0x07, 0x3b, 0x61, 0x08, 0xd7,
                      0x2d, 0x98, 0x10, 0xa3, 0x09, 0x14, 0xdf, 0xf4});
  ByteArray plain   ({0xae, 0x2d, 0x8a, 0x57, 0x1e, 0x03, 0xac, 0x9c,
                      0x9e, 0xb7, 0x6f, 0xac, 0x45, 0xaf, 0x8e, 0x51});
  ByteArray expected({0x39, 0xff, 0xed, 0x14, 0x3b, 0x28, 0xb1, 0xc8,
                      0x32, 0x11, 0x3c, 0x63, 0x31, 0xe5, 0x40, 0x7b});
  ByteArray actual;
  
  EXPECT_NO_THROW(actual = tau(key, plain, CipherMode::CFB, iv));
  
  EXPECT_EQ(expected, actual);
}

TEST_F(NoOpFixture, AES_256_CFB_3)
{
  ByteArray iv      ({0x39, 0xFF, 0xED, 0x14, 0x3B, 0x28, 0xB1, 0xC8,
                      0x32, 0x11, 0x3C, 0x63, 0x31, 0xE5, 0x40, 0x7B});
  ByteArray key     ({0x60, 0x3d, 0xeb, 0x10, 0x15, 0xca, 0x71, 0xbe,
                      0x2b, 0x73, 0xae, 0xf0, 0x85, 0x7d, 0x77, 0x81,
                      0x1f, 0x35, 0x2c, 0x07, 0x3b, 0x61, 0x08, 0xd7,
                      0x2d, 0x98, 0x10, 0xa3, 0x09, 0x14, 0xdf, 0xf4});
  ByteArray plain   ({0x30, 0xc8, 0x1c, 0x46, 0xa3, 0x5c, 0xe4, 0x11,
                      0xe5, 0xfb, 0xc1, 0x19, 0x1a, 0x0a, 0x52, 0xef});
  ByteArray expected({0xdf, 0x10, 0x13, 0x24, 0x15, 0xe5, 0x4b, 0x92,
                      0xa1, 0x3e, 0xd0, 0xa8, 0x26, 0x7a, 0xe2, 0xf9});
  ByteArray actual;
  
  EXPECT_NO_THROW(actual = tau(key, plain, CipherMode::CFB, iv));
  
  EXPECT_EQ(expected, actual);
}

TEST_F(NoOpFixture, AES_256_CFB_4)
{
  ByteArray iv      ({0xDF, 0x10, 0x13, 0x24, 0x15, 0xE5, 0x4B, 0x92,
                      0xA1, 0x3E, 0xD0, 0xA8, 0x26, 0x7A, 0xE2, 0xF9});
  ByteArray key     ({0x60, 0x3d, 0xeb, 0x10, 0x15, 0xca, 0x71, 0xbe,
                      0x2b, 0x73, 0xae, 0xf0, 0x85, 0x7d, 0x77, 0x81,
                      0x1f, 0x35, 0x2c, 0x07, 0x3b, 0x61, 0x08, 0xd7,
                      0x2d, 0x98, 0x10, 0xa3, 0x09, 0x14, 0xdf, 0xf4});
  ByteArray plain   ({0xf6, 0x9f, 0x24, 0x45, 0xdf, 0x4f, 0x9b, 0x17,
                      0xad, 0x2b, 0x41, 0x7b, 0xe6, 0x6c, 0x37, 0x10});
  ByteArray expected({0x75, 0xa3, 0x85, 0x74, 0x1a, 0xb9, 0xce, 0xf8,
                      0x20, 0x31, 0x62, 0x3d, 0x55, 0xb1, 0xe4, 0x71});
  ByteArray actual;
  
  EXPECT_NO_THROW(actual = tau(key, plain, CipherMode::CFB, iv));
  
  EXPECT_EQ(expected, actual);
}

/*
  Test vectors from: http://www.inconteam.com/software-development/41-encryption/55-aes-test-vectors#aes-cfb-256
  
  AES CFB128 256-bit encryption mode

  Encryption key: 603deb1015ca71be2b73aef0857d77811f352c073b6108d72d9810a30914dff4

  Initialization vector              Test vector                       Cipher text 
  000102030405060708090A0B0C0D0E0F  6bc1bee22e409f96e93d7e117393172a  DC7E84BFDA79164B7ECD8486985D3860
  DC7E84BFDA79164B7ECD8486985D3860  ae2d8a571e03ac9c9eb76fac45af8e51  39ffed143b28b1c832113c6331e5407b
  39FFED143B28B1C832113C6331E5407B  30c81c46a35ce411e5fbc1191a0a52ef  df10132415e54b92a13ed0a8267ae2f9
  DF10132415E54B92A13ED0A8267AE2F9  f69f2445df4f9b17ad2b417be66c3710  75a385741ab9cef82031623d55b1e471
*/
TEST_F(NoOpFixture, AES_256_OFB_1)
{
  ByteArray iv      ({0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
                      0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F});
  ByteArray key     ({0x60, 0x3d, 0xeb, 0x10, 0x15, 0xca, 0x71, 0xbe,
                      0x2b, 0x73, 0xae, 0xf0, 0x85, 0x7d, 0x77, 0x81,
                      0x1f, 0x35, 0x2c, 0x07, 0x3b, 0x61, 0x08, 0xd7,
                      0x2d, 0x98, 0x10, 0xa3, 0x09, 0x14, 0xdf, 0xf4});
  ByteArray plain   ({0x6b, 0xc1, 0xbe, 0xe2, 0x2e, 0x40, 0x9f, 0x96,
                      0xe9, 0x3d, 0x7e, 0x11, 0x73, 0x93, 0x17, 0x2a});
  ByteArray expected({0xdc, 0x7e, 0x84, 0xbf, 0xda, 0x79, 0x16, 0x4b,
                      0x7e, 0xcd, 0x84, 0x86, 0x98, 0x5d, 0x38, 0x60});
  ByteArray actual;
  
  EXPECT_NO_THROW(actual = tau(key, plain, CipherMode::OFB, iv));
  
  EXPECT_EQ(expected, actual);
}
TEST_F(NoOpFixture, AES_256_OFB_2)
{
  ByteArray iv      ({0xb7, 0xbf, 0x3a, 0x5d, 0xf4, 0x39, 0x89, 0xdd,
                      0x97, 0xf0, 0xfa, 0x97, 0xeb, 0xce, 0x2f, 0x4a});
  ByteArray key     ({0x60, 0x3d, 0xeb, 0x10, 0x15, 0xca, 0x71, 0xbe,
                      0x2b, 0x73, 0xae, 0xf0, 0x85, 0x7d, 0x77, 0x81,
                      0x1f, 0x35, 0x2c, 0x07, 0x3b, 0x61, 0x08, 0xd7,
                      0x2d, 0x98, 0x10, 0xa3, 0x09, 0x14, 0xdf, 0xf4});
  ByteArray plain   ({0xae, 0x2d, 0x8a, 0x57, 0x1e, 0x03, 0xac, 0x9c,
                      0x9e, 0xb7, 0x6f, 0xac, 0x45, 0xaf, 0x8e, 0x51});
  ByteArray expected({0x4f, 0xeb, 0xdc, 0x67, 0x40, 0xd2, 0x0b, 0x3a,
                      0xc8, 0x8f, 0x6a, 0xd8, 0x2a, 0x4f, 0xb0, 0x8d});
  ByteArray actual;
  
  EXPECT_NO_THROW(actual = tau(key, plain, CipherMode::OFB, iv));
  
  EXPECT_EQ(expected, actual);
}
TEST_F(NoOpFixture, AES_256_OFB_3)
{
  ByteArray iv      ({0xE1, 0xC6, 0x56, 0x30, 0x5E, 0xD1, 0xA7, 0xA6,
                      0x56, 0x38, 0x05, 0x74, 0x6F, 0xE0, 0x3E, 0xDC});
  ByteArray key     ({0x60, 0x3d, 0xeb, 0x10, 0x15, 0xca, 0x71, 0xbe,
                      0x2b, 0x73, 0xae, 0xf0, 0x85, 0x7d, 0x77, 0x81,
                      0x1f, 0x35, 0x2c, 0x07, 0x3b, 0x61, 0x08, 0xd7,
                      0x2d, 0x98, 0x10, 0xa3, 0x09, 0x14, 0xdf, 0xf4});
  ByteArray plain   ({0x30, 0xc8, 0x1c, 0x46, 0xa3, 0x5c, 0xe4, 0x11,
                      0xe5, 0xfb, 0xc1, 0x19, 0x1a, 0x0a, 0x52, 0xef});
  ByteArray expected({0x71, 0xab, 0x47, 0xa0, 0x86, 0xe8, 0x6e, 0xed,
                      0xf3, 0x9d, 0x1c, 0x5b, 0xba, 0x97, 0xc4, 0x08});
  ByteArray actual;
  
  EXPECT_NO_THROW(actual = tau(key, plain, CipherMode::CFB, iv));
  
  EXPECT_EQ(expected, actual);
}
TEST_F(NoOpFixture, AES_256_OFB_4)
{
  ByteArray iv      ({0x41, 0x63, 0x5B, 0xE6, 0x25, 0xB4, 0x8A, 0xFC,
                      0x16, 0x66, 0xDD, 0x42, 0xA0, 0x9D, 0x96, 0xE7});
  ByteArray key     ({0x60, 0x3d, 0xeb, 0x10, 0x15, 0xca, 0x71, 0xbe,
                      0x2b, 0x73, 0xae, 0xf0, 0x85, 0x7d, 0x77, 0x81,
                      0x1f, 0x35, 0x2c, 0x07, 0x3b, 0x61, 0x08, 0xd7,
                      0x2d, 0x98, 0x10, 0xa3, 0x09, 0x14, 0xdf, 0xf4});
  ByteArray plain   ({0xf6, 0x9f, 0x24, 0x45, 0xdf, 0x4f, 0x9b, 0x17,
                      0xad, 0x2b, 0x41, 0x7b, 0xe6, 0x6c, 0x37, 0x10});
  ByteArray expected({0x01, 0x26, 0x14, 0x1d, 0x67, 0xf3, 0x7b, 0xe8,
                      0x53, 0x8f, 0x5a, 0x8b, 0xe7, 0x40, 0xe4, 0x84});
  ByteArray actual;
  
  EXPECT_NO_THROW(actual = tau(key, plain, CipherMode::OFB, iv));
  
  EXPECT_EQ(expected, actual);
}
int main(int argc, char** argv)
{
  ::testing::InitGoogleTest(&argc, argv);
  
  return RUN_ALL_TESTS();
}
