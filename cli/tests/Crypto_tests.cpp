#include "gtest/gtest.h"

#include <EggBeater/Crypto.h>

using namespace EggBeater;

class NoOpFixture : public ::testing::Test
{
public:
  NoOpFixture()
  {
    // No-op
  }
  
  virtual ~NoOpFixture()
  {
    // No-op
  }
  
  virtual void SetUp()
  {
    // No-op
  }
  
  virtual void TearDown()
  {
    // No-op
  }
};

TEST_F(NoOpFixture, delta_empty)
{
  ByteArray phase1Password;
  ByteArray expected({0xC5, 0xD2, 0x46, 0x01, 0x86, 0xF7, 0x23, 0x3C, 0x92,
                      0x7E, 0x7D, 0xB2, 0xDC, 0xC7, 0x03, 0xC0, 0xE5, 0x00,
                      0xB6, 0x53, 0xCA, 0x82, 0x27, 0x3B, 0x7B, 0xFA, 0xD8,
                      0x04, 0x5D, 0x85, 0xA4, 0x70});
  ByteArray actual;
  
  EXPECT_NO_THROW(actual = delta(phase1Password));
  
  EXPECT_EQ(expected, actual);
}

TEST_F(NoOpFixture, gamma_empty)
{
  ByteArray phase2Passcode;
  ByteArray expected({0xC5, 0xD2, 0x46, 0x01, 0x86, 0xF7, 0x23, 0x3C, 0x92,
                      0x7E, 0x7D, 0xB2, 0xDC, 0xC7, 0x03, 0xC0, 0xE5, 0x00,
                      0xB6, 0x53, 0xCA, 0x82, 0x27, 0x3B, 0x7B, 0xFA, 0xD8,
                      0x04, 0x5D, 0x85, 0xA4, 0x70});
  ByteArray actual;
  
  EXPECT_NO_THROW(actual = gamma(phase2Passcode));
  
  EXPECT_EQ(expected, actual);
}

TEST_F(NoOpFixture, tau_emptyData)
{
  ByteArray phase2Key({0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08,
                       0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f, 0x10, 0x11,
                       0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1a,
                       0x1b, 0x1c, 0x1d, 0x1e, 0x1f});
  ByteArray plainText;
  ByteArray expected;
  ByteArray actual;
  
  EXPECT_NO_THROW(actual = tau(phase2Key, plainText));
  
  EXPECT_EQ(expected, actual);
}

TEST_F(NoOpFixture, tau_fixedKey)
{
  ByteArray iv      ({0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
                      0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F});
  ByteArray key     ({0x60, 0x3d, 0xeb, 0x10, 0x15, 0xca, 0x71, 0xbe,
                      0x2b, 0x73, 0xae, 0xf0, 0x85, 0x7d, 0x77, 0x81,
                      0x1f, 0x35, 0x2c, 0x07, 0x3b, 0x61, 0x08, 0xd7,
                      0x2d, 0x98, 0x10, 0xa3, 0x09, 0x14, 0xdf, 0xf4});
  ByteArray plain   ({0x6b, 0xc1, 0xbe, 0xe2, 0x2e, 0x40, 0x9f, 0x96,
                      0xe9, 0x3d, 0x7e, 0x11, 0x73, 0x93, 0x17, 0x2a});
  ByteArray expected({0xDC, 0x7E, 0x84, 0xBF, 0xDA, 0x79, 0x16, 0x4B,
                      0x7E, 0xCD, 0x84, 0x86, 0x98, 0x5D, 0x38, 0x60});
  ByteArray actual;
  
  EXPECT_NO_THROW(actual = tau(key, plain, CipherMode::CFB, iv));
  
  EXPECT_EQ(expected, actual);
}

TEST_F(NoOpFixture, tau_emptyKey)
{
  ByteArray phase2Key;
  ByteArray plainText;
  ByteArray expected;
  ByteArray actual;
  
  EXPECT_THROW(actual = tau(phase2Key, plainText), std::runtime_error);
  
  EXPECT_EQ(expected, actual);
}

int main(int argc, char** argv)
{
  ::testing::InitGoogleTest(&argc, argv);
  
  return RUN_ALL_TESTS();
}
